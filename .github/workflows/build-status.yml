name: Build Status

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # This enables manual triggering

env:
  VCPKG_ROOT: ${{ github.workspace }}\vcpkg

jobs:
  quick-build:
    name: Quick Build Check
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Setup MSVC environment
      uses: ilammy/msvc-dev-cmd@v1

    - name: Restore VCPKG_ROOT environment variable
      run: |
        # The msvc-dev-cmd action overrides VCPKG_ROOT, so we need to restore it
        $originalVcpkgRoot = "${{ github.workspace }}\vcpkg"
        Write-Host "Restoring VCPKG_ROOT to: $originalVcpkgRoot"
        echo "VCPKG_ROOT=$originalVcpkgRoot" >> $env:GITHUB_ENV

    # vcpkg_installed/ is ignored by git and not cached/uploaded
    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-vcpkg-quick-${{ hashFiles('build.bat') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Setup vcpkg (if not cached)
      run: |
        if (-not (Test-Path "${{ env.VCPKG_ROOT }}")) {
          Write-Host "Setting up fresh vcpkg installation..."
          git clone https://github.com/Microsoft/vcpkg.git "${{ env.VCPKG_ROOT }}"
          Set-Location "${{ env.VCPKG_ROOT }}"
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
        } else {
          Write-Host "Using cached vcpkg installation"
          Set-Location "${{ env.VCPKG_ROOT }}"
          .\vcpkg integrate install
        }

    - name: Install dependencies
      run: |
        Set-Location "${{ env.VCPKG_ROOT }}"
        
        Write-Host "üì¶ Installing libcurl with SSL support..."
        Write-Host "Using vcpkg at: ${{ env.VCPKG_ROOT }}"
        
        # Enable classic mode for vcpkg
        .\vcpkg install curl[ssl]:x64-windows-static --recurse --classic
        
        Write-Host "üìÇ Verifying installation..."
        .\vcpkg list --classic | Where-Object { $_ -like "*curl*" }
        
        # Verify critical files exist
        $curlHeader = "${{ env.VCPKG_ROOT }}\installed\x64-windows-static\include\curl\curl.h"
        $curlLib = "${{ env.VCPKG_ROOT }}\installed\x64-windows-static\lib\libcurl.lib"
        
        if (Test-Path $curlHeader) {
          Write-Host "‚úÖ curl.h found"
        } else {
          Write-Host "‚ùå curl.h missing"
        }
        
        if (Test-Path $curlLib) {
          Write-Host "‚úÖ libcurl.lib found"
        } else {
          Write-Host "‚ùå libcurl.lib missing"
        }

    - name: Build SystemMonitor
      run: |
        Write-Host "üî® Building SystemMonitor..."

        # Normalize vcpkg path for Windows
        $vcpkgRoot = "${{ env.VCPKG_ROOT }}".Replace('/', '\')
        $env:VCPKG_ROOT = $vcpkgRoot
        
        Write-Host "Using VCPKG_ROOT: $vcpkgRoot"
        
        $includeDir = "$vcpkgRoot\installed\x64-windows-static\include"
        $curlHeader = "$vcpkgRoot\installed\x64-windows-static\include\curl\curl.h"

        if (!(Test-Path $includeDir)) {
          Write-Host "ERROR: Include directory missing: $includeDir"
          exit 1
        } else {
          Write-Host "‚úÖ vcpkg include directory found!"
        }
        
        if (!(Test-Path $curlHeader)) {
          Write-Host "ERROR: curl.h missing: $curlHeader"
          Write-Host "Available files in include directory:"
          Get-ChildItem $includeDir -ErrorAction SilentlyContinue | Format-Table Name
          exit 1
        } else {
          Write-Host "‚úÖ libcurl headers found!"
        }

        cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release

    - name: Verify build output
      run: |
        if (Test-Path "bin\SystemMonitor.exe") {
          Write-Host "‚úÖ Build successful - SystemMonitor.exe created"
          $size = (Get-Item "bin\SystemMonitor.exe").Length / 1MB
          Write-Host "üìä Executable size: $([math]::Round($size, 2)) MB"
        } else {
          Write-Host "‚ùå Build failed - SystemMonitor.exe not found"
          Write-Host "üìÇ Contents of bin directory:"
          if (Test-Path "bin") {
            Get-ChildItem "bin" | Format-Table Name, Length
          } else {
            Write-Host "bin directory does not exist"
          }
          exit 1
        }

    - name: Quick functionality test
      run: |
        Write-Host "üß™ Testing executable..."
        try {
          # Test help command (should exit quickly)
          $process = Start-Process -FilePath ".\bin\SystemMonitor.exe" -ArgumentList "--help" -Wait -NoNewWindow -PassThru
          if ($process.ExitCode -eq 0 -or $process.ExitCode -eq 1) {
            Write-Host "‚úÖ Executable runs successfully"
          } else {
            Write-Host "‚ö†Ô∏è Executable returned exit code: $($process.ExitCode)"
          }
        } catch {
          Write-Host "‚ö†Ô∏è Could not test executable: $($_.Exception.Message)"
        }

    - name: Upload build artifact (on success)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: SystemMonitor
        path: |
          bin/SystemMonitor.exe
          config/*.cfg.email-sample
          config/*.cfg.sample
          config/*.cfg.template
          docs/*.*
          README.md
        retention-days: 30

    - name: Build summary
      run: |
        Write-Host "üìã Build Summary:"
        Write-Host "‚úÖ Source files verified"
        Write-Host "‚úÖ Dependencies installed"
        Write-Host "‚úÖ Compilation successful"
        Write-Host "‚úÖ Executable created"
        Write-Host ""
        Write-Host "üéØ Quick build check completed successfully!"